// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Analizadores/Lexico.jflex

/*--------------------------------------------------
 ------------  1ra Area: Codigo de Usuario ---------
 ---------------------------------------------------*/

//------> Paquetes,importaciones
package Analizadores;
import Errores.ErroresL;
import proyecto.Principal;
import Objetos.Token;
import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;

/*----------------------------------------------------------
  ------------  2da Area: Opciones y Declaraciones ---------
  ----------------------------------------------------------*/

@SuppressWarnings("fallthrough")
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5,  6,  7,  0,  0,  0,  0,  0,  8,  9,  0, 10, 11, 12, 13, 14, 
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 17, 18, 19, 20,  0, 
    21, 22, 23, 24, 25, 26,  0, 27, 28, 29, 30,  0, 31, 32, 33, 34, 
    35,  0, 36, 37, 38, 39, 40,  0, 41, 42, 43, 44,  0, 45,  0, 46, 
     0, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 52, 57, 58, 59, 60, 
    61, 52, 62, 63, 64, 65, 66, 52, 67, 68, 69,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\15\1\1\20\1\21\16\22\2\3\2\0"+
    "\1\11\26\0\25\22\1\23\1\0\1\24\3\0\1\25"+
    "\2\0\1\26\4\0\1\27\1\0\1\30\1\31\1\32"+
    "\2\0\1\33\1\34\2\0\1\35\1\24\3\22\1\25"+
    "\2\22\1\26\4\22\1\27\1\22\1\30\1\31\1\32"+
    "\2\22\1\33\1\34\2\22\1\35\1\0\1\36\3\0"+
    "\1\37\1\40\1\0\1\41\4\0\1\42\5\0\1\36"+
    "\3\22\1\37\1\40\1\41\4\22\1\42\5\22\1\43"+
    "\6\0\1\44\1\45\1\46\4\0\5\22\1\44\1\45"+
    "\1\46\4\22\1\47\1\0\1\50\7\0\1\51\1\52"+
    "\1\0\1\47\1\22\1\50\6\22\1\51\1\52\1\22"+
    "\1\53\5\0\1\54\1\55\1\56\1\57\1\0\1\53"+
    "\4\22\1\54\1\55\1\56\1\57\1\22\1\0\1\60"+
    "\1\0\1\61\1\0\1\62\1\60\1\22\1\61\1\22"+
    "\1\62\1\0\1\63\1\64\1\63\1\64\1\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\106\0\106\0\u015e"+
    "\0\106\0\u015e\0\u01a4\0\u015e\0\106\0\106\0\u01ea\0\106"+
    "\0\106\0\106\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\106"+
    "\0\106\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762"+
    "\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\106"+
    "\0\u0992\0\u09d8\0\u01a4\0\u01a4\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0"+
    "\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20"+
    "\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180"+
    "\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0"+
    "\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\106"+
    "\0\u15e0\0\106\0\u1626\0\u166c\0\u16b2\0\106\0\u16f8\0\u173e"+
    "\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\106\0\u18e2\0\106"+
    "\0\u1928\0\106\0\u196e\0\u19b4\0\106\0\106\0\u19fa\0\u1a40"+
    "\0\u1a86\0\u0604\0\u1acc\0\u1b12\0\u1b58\0\u0604\0\u1b9e\0\u1be4"+
    "\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u0604\0\u1d88\0\u0604"+
    "\0\u1dce\0\u0604\0\u1e14\0\u1e5a\0\u0604\0\u0604\0\u1ea0\0\u1ee6"+
    "\0\u1f2c\0\u1f72\0\106\0\u1fb8\0\u1ffe\0\u2044\0\106\0\106"+
    "\0\u208a\0\106\0\u20d0\0\u2116\0\u215c\0\u21a2\0\106\0\u21e8"+
    "\0\u222e\0\u2274\0\u22ba\0\u2300\0\u0604\0\u2346\0\u238c\0\u23d2"+
    "\0\u0604\0\u0604\0\u0604\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u0604"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\106\0\u268e\0\u26d4"+
    "\0\u271a\0\u2760\0\u27a6\0\u27ec\0\106\0\u2832\0\106\0\u2878"+
    "\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8"+
    "\0\u0604\0\u2aee\0\u0604\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\106"+
    "\0\u2c4c\0\106\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0"+
    "\0\u2e36\0\u2e7c\0\106\0\u2ec2\0\u0604\0\u2f08\0\u0604\0\u2f4e"+
    "\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u0604\0\u3138"+
    "\0\106\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\106\0\106"+
    "\0\106\0\106\0\u32dc\0\u0604\0\u3322\0\u3368\0\u33ae\0\u33f4"+
    "\0\u0604\0\u0604\0\u0604\0\u0604\0\u343a\0\u3480\0\106\0\u34c6"+
    "\0\106\0\u350c\0\106\0\u0604\0\u3552\0\u0604\0\u3598\0\u0604"+
    "\0\u35de\0\106\0\106\0\u0604\0\u0604\0\u3624\0\106";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\2\1\24\1\25"+
    "\1\26\1\27\1\30\2\2\1\31\1\32\2\2\1\33"+
    "\1\34\1\35\1\36\1\2\1\37\3\2\1\40\1\41"+
    "\1\2\1\42\1\43\1\44\1\45\1\46\1\43\1\47"+
    "\1\50\2\43\1\51\1\52\2\43\1\53\1\54\1\55"+
    "\1\56\1\43\1\57\3\43\107\0\2\3\1\0\2\3"+
    "\100\0\2\4\1\60\1\4\1\61\101\4\2\62\1\0"+
    "\4\62\1\0\76\62\15\0\1\63\1\0\1\14\105\0"+
    "\1\64\74\0\1\65\143\0\1\66\31\0\1\66\43\0"+
    "\1\67\5\0\1\70\23\0\1\67\5\0\1\70\46\0"+
    "\1\71\4\0\1\72\24\0\1\71\4\0\1\72\47\0"+
    "\1\73\2\0\1\74\7\0\1\75\16\0\1\73\2\0"+
    "\1\74\7\0\1\75\46\0\1\76\31\0\1\76\44\0"+
    "\1\77\31\0\1\77\44\0\1\100\30\0\1\100\54\0"+
    "\1\101\3\0\1\102\2\0\1\103\4\0\1\104\4\0"+
    "\1\105\7\0\1\101\3\0\1\102\3\0\1\103\4\0"+
    "\1\104\4\0\1\105\50\0\1\106\31\0\1\106\41\0"+
    "\1\107\30\0\1\107\71\0\1\110\31\0\1\110\41\0"+
    "\1\111\31\0\1\111\44\0\1\112\30\0\1\112\45\0"+
    "\1\43\24\0\1\66\11\0\20\43\1\113\7\43\17\0"+
    "\1\43\36\0\30\43\17\0\1\43\14\0\1\67\5\0"+
    "\1\70\13\0\10\43\1\114\5\43\1\115\11\43\17\0"+
    "\1\43\15\0\1\71\4\0\1\72\13\0\11\43\1\116"+
    "\4\43\1\117\11\43\17\0\1\43\16\0\1\73\2\0"+
    "\1\74\7\0\1\75\4\0\12\43\1\120\2\43\1\121"+
    "\7\43\1\122\2\43\17\0\1\43\24\0\1\76\11\0"+
    "\20\43\1\123\7\43\17\0\1\43\15\0\1\77\20\0"+
    "\11\43\1\124\16\43\17\0\1\43\6\0\1\100\27\0"+
    "\1\43\1\125\26\43\17\0\1\43\6\0\1\101\3\0"+
    "\1\102\2\0\1\103\4\0\1\104\4\0\1\105\6\0"+
    "\1\43\1\126\3\43\1\127\3\43\1\130\4\43\1\131"+
    "\4\43\1\132\4\43\17\0\1\43\24\0\1\106\11\0"+
    "\20\43\1\133\7\43\17\0\1\43\12\0\1\107\23\0"+
    "\5\43\1\134\22\43\17\0\1\43\27\0\1\110\6\0"+
    "\23\43\1\135\4\43\17\0\1\43\15\0\1\111\20\0"+
    "\11\43\1\136\16\43\17\0\1\43\6\0\1\112\27\0"+
    "\1\43\1\137\26\43\2\0\1\60\103\0\2\62\1\0"+
    "\4\62\1\140\76\62\16\141\1\0\67\141\44\0\1\142"+
    "\31\0\1\142\35\0\1\143\30\0\1\143\65\0\1\144"+
    "\1\0\1\145\27\0\1\144\1\0\1\145\62\0\1\146"+
    "\31\0\1\146\52\0\1\147\31\0\1\147\36\0\1\150"+
    "\30\0\1\150\53\0\1\151\30\0\1\151\55\0\1\152"+
    "\30\0\1\152\50\0\1\153\30\0\1\153\73\0\1\154"+
    "\31\0\1\154\35\0\1\155\30\0\1\155\76\0\1\156"+
    "\31\0\1\156\33\0\1\157\30\0\1\157\64\0\1\160"+
    "\31\0\1\160\43\0\1\161\30\0\1\161\62\0\1\162"+
    "\31\0\1\162\51\0\1\163\4\0\1\164\24\0\1\163"+
    "\4\0\1\164\56\0\1\165\31\0\1\165\46\0\1\166"+
    "\31\0\1\166\61\0\1\167\31\0\1\167\44\0\1\170"+
    "\4\0\1\171\24\0\1\170\4\0\1\171\26\0\1\43"+
    "\24\0\1\142\11\0\20\43\1\172\7\43\17\0\1\43"+
    "\6\0\1\143\27\0\1\43\1\173\26\43\17\0\1\43"+
    "\17\0\1\144\1\0\1\145\14\0\13\43\1\174\1\43"+
    "\1\175\12\43\17\0\1\43\30\0\1\146\5\0\24\43"+
    "\1\176\3\43\17\0\1\43\27\0\1\147\6\0\23\43"+
    "\1\177\4\43\17\0\1\43\12\0\1\150\23\0\5\43"+
    "\1\200\22\43\17\0\1\43\11\0\1\151\24\0\4\43"+
    "\1\201\23\43\17\0\1\43\12\0\1\152\23\0\5\43"+
    "\1\202\22\43\17\0\1\43\6\0\1\153\27\0\1\43"+
    "\1\203\26\43\17\0\1\43\25\0\1\154\10\0\21\43"+
    "\1\204\6\43\17\0\1\43\7\0\1\155\26\0\2\43"+
    "\1\205\25\43\17\0\1\43\31\0\1\156\4\0\25\43"+
    "\1\206\2\43\17\0\1\43\11\0\1\157\24\0\4\43"+
    "\1\207\23\43\17\0\1\43\21\0\1\160\14\0\15\43"+
    "\1\210\12\43\17\0\1\43\11\0\1\161\24\0\4\43"+
    "\1\211\23\43\17\0\1\43\17\0\1\162\16\0\13\43"+
    "\1\212\14\43\17\0\1\43\15\0\1\163\4\0\1\164"+
    "\13\0\11\43\1\213\4\43\1\214\11\43\17\0\1\43"+
    "\25\0\1\165\10\0\21\43\1\215\6\43\17\0\1\43"+
    "\20\0\1\166\15\0\14\43\1\216\13\43\17\0\1\43"+
    "\26\0\1\167\7\0\22\43\1\217\5\43\17\0\1\43"+
    "\17\0\1\170\4\0\1\171\11\0\13\43\1\220\4\43"+
    "\1\221\7\43\6\141\1\222\77\141\44\0\1\223\31\0"+
    "\1\223\56\0\1\224\31\0\1\224\51\0\1\225\31\0"+
    "\1\225\35\0\1\226\30\0\1\226\76\0\1\227\1\230"+
    "\30\0\1\227\1\230\6\0\1\231\130\0\1\232\30\0"+
    "\1\232\67\0\1\233\31\0\1\233\56\0\1\234\31\0"+
    "\1\234\37\0\1\235\30\0\1\235\57\0\1\236\31\0"+
    "\1\236\44\0\1\237\30\0\1\237\67\0\1\240\31\0"+
    "\1\240\45\0\1\241\31\0\1\241\67\0\1\242\31\0"+
    "\1\242\53\0\1\243\31\0\1\243\41\0\1\244\31\0"+
    "\1\244\35\0\1\43\24\0\1\223\11\0\20\43\1\245"+
    "\7\43\17\0\1\43\27\0\1\224\6\0\23\43\1\246"+
    "\4\43\17\0\1\43\25\0\1\225\10\0\21\43\1\247"+
    "\6\43\17\0\1\43\7\0\1\226\26\0\2\43\1\250"+
    "\25\43\17\0\1\43\31\0\1\227\1\230\3\0\25\43"+
    "\1\251\1\252\1\43\5\0\1\231\11\0\1\43\36\0"+
    "\30\43\17\0\1\43\10\0\1\232\25\0\3\43\1\253"+
    "\24\43\17\0\1\43\23\0\1\233\12\0\17\43\1\254"+
    "\10\43\17\0\1\43\26\0\1\234\7\0\22\43\1\255"+
    "\5\43\17\0\1\43\12\0\1\235\23\0\5\43\1\256"+
    "\22\43\17\0\1\43\15\0\1\236\20\0\11\43\1\257"+
    "\16\43\17\0\1\43\6\0\1\237\27\0\1\43\1\260"+
    "\26\43\17\0\1\43\21\0\1\240\14\0\15\43\1\261"+
    "\12\43\17\0\1\43\13\0\1\241\22\0\7\43\1\262"+
    "\20\43\17\0\1\43\27\0\1\242\6\0\23\43\1\263"+
    "\4\43\17\0\1\43\27\0\1\243\6\0\23\43\1\264"+
    "\4\43\17\0\1\43\15\0\1\244\20\0\11\43\1\265"+
    "\16\43\6\141\1\222\15\141\1\266\61\141\40\0\1\267"+
    "\31\0\1\267\55\0\1\270\31\0\1\270\50\0\1\271"+
    "\31\0\1\271\57\0\1\272\31\0\1\272\44\0\1\273"+
    "\31\0\1\273\61\0\1\274\31\0\1\274\50\0\1\275"+
    "\31\0\1\275\42\0\1\276\30\0\1\276\74\0\1\277"+
    "\31\0\1\277\51\0\1\300\31\0\1\300\46\0\1\301"+
    "\31\0\1\301\46\0\1\302\30\0\1\302\50\0\1\303"+
    "\30\0\1\303\45\0\1\43\20\0\1\267\15\0\14\43"+
    "\1\304\13\43\17\0\1\43\22\0\1\270\13\0\16\43"+
    "\1\305\11\43\17\0\1\43\17\0\1\271\16\0\13\43"+
    "\1\306\14\43\17\0\1\43\14\0\1\273\21\0\10\43"+
    "\1\307\17\43\17\0\1\43\22\0\1\274\13\0\16\43"+
    "\1\310\11\43\17\0\1\43\17\0\1\275\16\0\13\43"+
    "\1\311\14\43\17\0\1\43\6\0\1\276\27\0\1\43"+
    "\1\312\26\43\17\0\1\43\26\0\1\277\7\0\22\43"+
    "\1\313\5\43\17\0\1\43\24\0\1\300\11\0\20\43"+
    "\1\314\7\43\17\0\1\43\17\0\1\301\16\0\13\43"+
    "\1\315\14\43\17\0\1\43\12\0\1\302\23\0\5\43"+
    "\1\316\22\43\17\0\1\43\6\0\1\303\27\0\1\43"+
    "\1\317\26\43\41\0\1\320\31\0\1\320\51\0\1\321"+
    "\31\0\1\321\46\0\1\322\30\0\1\322\66\0\1\323"+
    "\31\0\1\323\36\0\1\324\7\0\1\325\3\0\1\326"+
    "\14\0\1\324\10\0\1\325\3\0\1\326\43\0\1\327"+
    "\31\0\1\327\61\0\1\330\31\0\1\330\40\0\1\331"+
    "\30\0\1\331\70\0\1\332\31\0\1\332\56\0\1\333"+
    "\31\0\1\333\47\0\1\334\31\0\1\334\31\0\1\43"+
    "\21\0\1\320\14\0\15\43\1\335\12\43\17\0\1\43"+
    "\17\0\1\321\16\0\13\43\1\336\14\43\17\0\1\43"+
    "\12\0\1\322\23\0\5\43\1\337\22\43\17\0\1\43"+
    "\7\0\1\324\7\0\1\325\3\0\1\326\12\0\2\43"+
    "\1\340\10\43\1\341\3\43\1\342\10\43\17\0\1\43"+
    "\13\0\1\327\22\0\7\43\1\343\20\43\17\0\1\43"+
    "\21\0\1\330\14\0\15\43\1\344\12\43\17\0\1\43"+
    "\6\0\1\331\27\0\1\43\1\345\26\43\17\0\1\43"+
    "\22\0\1\332\13\0\16\43\1\346\11\43\17\0\1\43"+
    "\25\0\1\333\10\0\21\43\1\347\6\43\17\0\1\43"+
    "\21\0\1\334\14\0\15\43\1\350\12\43\32\0\1\351"+
    "\30\0\1\351\64\0\1\352\31\0\1\352\37\0\1\353"+
    "\30\0\1\353\63\0\1\354\31\0\1\354\53\0\1\355"+
    "\31\0\1\355\62\0\1\356\31\0\1\356\35\0\1\357"+
    "\30\0\1\357\66\0\1\360\31\0\1\360\64\0\1\361"+
    "\1\362\30\0\1\361\1\362\54\0\1\363\31\0\1\363"+
    "\17\0\1\43\12\0\1\351\23\0\5\43\1\364\22\43"+
    "\17\0\1\43\6\0\1\353\27\0\1\43\1\365\26\43"+
    "\17\0\1\43\15\0\1\354\20\0\11\43\1\366\16\43"+
    "\17\0\1\43\15\0\1\355\20\0\11\43\1\367\16\43"+
    "\17\0\1\43\24\0\1\356\11\0\20\43\1\370\7\43"+
    "\17\0\1\43\6\0\1\357\27\0\1\43\1\371\26\43"+
    "\17\0\1\43\20\0\1\360\15\0\14\43\1\372\13\43"+
    "\17\0\1\43\31\0\1\361\1\362\3\0\25\43\1\373"+
    "\1\374\1\43\17\0\1\43\33\0\1\363\2\0\27\43"+
    "\1\375\33\0\1\376\31\0\1\376\64\0\1\377\31\0"+
    "\1\377\50\0\1\u0100\31\0\1\u0100\44\0\1\u0101\30\0"+
    "\1\u0101\50\0\1\u0102\30\0\1\u0102\54\0\1\u0103\30\0"+
    "\1\u0103\45\0\1\43\24\0\1\377\11\0\20\43\1\u0104"+
    "\7\43\17\0\1\43\21\0\1\u0100\14\0\15\43\1\u0105"+
    "\12\43\17\0\1\43\12\0\1\u0101\23\0\5\43\1\u0106"+
    "\22\43\17\0\1\43\6\0\1\u0102\27\0\1\43\1\u0107"+
    "\26\43\17\0\1\43\6\0\1\u0103\27\0\1\43\1\u0108"+
    "\26\43\44\0\1\u0109\31\0\1\u0109\41\0\1\u010a\30\0"+
    "\1\u010a\62\0\1\u010b\31\0\1\u010b\32\0\1\43\12\0"+
    "\1\u010a\23\0\5\43\1\u010c\22\43\17\0\1\43\20\0"+
    "\1\u010b\15\0\14\43\1\u010d\13\43\26\0\1\u010e\30\0"+
    "\1\u010e\66\0\1\u010f\31\0\1\u010f\13\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13930];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\1\11\3\1\2\11"+
    "\1\1\3\11\15\1\2\11\16\1\1\11\1\1\2\0"+
    "\1\1\26\0\25\1\1\11\1\0\1\11\3\0\1\11"+
    "\2\0\1\1\4\0\1\11\1\0\1\11\1\1\1\11"+
    "\2\0\2\11\2\0\31\1\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\4\0\1\11\5\0\21\1\1\11\6\0"+
    "\1\11\1\1\1\11\4\0\14\1\1\11\1\0\1\11"+
    "\7\0\1\1\1\11\1\0\14\1\1\11\5\0\4\11"+
    "\1\0\12\1\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\1\1\0\2\11\2\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //----> Codigo de usuario en sintaxis java
    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { ErroresL err = new ErroresL("Lexico",yytext(), yyline, yycolumn); 
                          Principal.ListaErrores.add(err);
                          err.SendError();
            }
          // fall through
          case 54: break;
          case 2:
            { /* Espacios en blanco, se ignoran */
            }
          // fall through
          case 55: break;
          case 3:
            { Token nuevo = new Token(yytext(), "Comentario Simple", yyline,yycolumn);
                        Principal.ListaTokens.add(nuevo);
                        System.out.println("Comentario: "+yytext());
            }
          // fall through
          case 56: break;
          case 4:
            { Token nuevo = new Token(yytext(), "Comillas", yyline,yycolumn);
              Principal.ListaTokens.add(nuevo);
              System.out.println("Reconocio "+yytext()+" Comillas"); return new Symbol(sym.Comillas, yycolumn, yyline, yytext());
            }
          // fall through
          case 57: break;
          case 5:
            { Token nuevo = new Token(yytext(), "AbreParentesis", yyline,yycolumn);
              Principal.ListaTokens.add(nuevo);
              System.out.println("Reconocio "+yytext()+" AbreP"); return new Symbol(sym.AbreP, yycolumn, yyline, yytext());
            }
          // fall through
          case 58: break;
          case 6:
            { Token nuevo = new Token(yytext(), "CierraParentesis", yyline,yycolumn);
              Principal.ListaTokens.add(nuevo);
              System.out.println("Reconocio "+yytext()+" CierraP"); return new Symbol(sym.CierraP, yycolumn, yyline, yytext());
            }
          // fall through
          case 59: break;
          case 7:
            { Token nuevo = new Token(yytext(), "Coma", yyline,yycolumn);
              Principal.ListaTokens.add(nuevo);
              System.out.println("Reconocio "+yytext()+" Coma"); return new Symbol(sym.Coma, yycolumn, yyline, yytext());
            }
          // fall through
          case 60: break;
          case 8:
            { Token nuevo = new Token(yytext(), "Guion", yyline,yycolumn);
              Principal.ListaTokens.add(nuevo);
              System.out.println("Reconocio "+yytext()+" guion"); return new Symbol(sym.guion, yycolumn, yyline, yytext());
            }
          // fall through
          case 61: break;
          case 9:
            { Token nuevo = new Token(yytext(), "Doublee", yyline,yycolumn);
               Principal.ListaTokens.add(nuevo);
               System.out.println("Reconocio "+yytext()+" doublee"); return new Symbol(sym.doublee, yycolumn, yyline, yytext());
            }
          // fall through
          case 62: break;
          case 10:
            { Token nuevo = new Token(yytext(), "DosPuntos", yyline,yycolumn);
              Principal.ListaTokens.add(nuevo);
              System.out.println("Reconocio "+yytext()+" DosPuntos"); return new Symbol(sym.DosPuntos, yycolumn, yyline, yytext());
            }
          // fall through
          case 63: break;
          case 11:
            { Token nuevo = new Token(yytext(), "PuntoComa", yyline,yycolumn);
              Principal.ListaTokens.add(nuevo);
              System.out.println("Reconocio "+yytext()+" PuntoComa"); return new Symbol(sym.PuntoComa, yycolumn, yyline, yytext());
            }
          // fall through
          case 64: break;
          case 12:
            { Token nuevo = new Token(yytext(), "Menor", yyline,yycolumn);
              Principal.ListaTokens.add(nuevo);
              System.out.println("Reconocio "+yytext()+" menor"); return new Symbol(sym.menor, yycolumn, yyline, yytext());
            }
          // fall through
          case 65: break;
          case 13:
            { Token nuevo = new Token(yytext(), "Igual", yyline,yycolumn);
              Principal.ListaTokens.add(nuevo);
              System.out.println("Reconocio "+yytext()+" Igual"); return new Symbol(sym.Igual, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          case 14:
            { Token nuevo = new Token(yytext(), "Mayor", yyline,yycolumn);
              Principal.ListaTokens.add(nuevo);
              System.out.println("Reconocio "+yytext()+" mayor"); return new Symbol(sym.mayor, yycolumn, yyline, yytext());
            }
          // fall through
          case 67: break;
          case 15:
            { Token nuevo = new Token(yytext(), "Arroba", yyline,yycolumn);
              Principal.ListaTokens.add(nuevo);
              System.out.println("Reconocio "+yytext()+" arroba"); return new Symbol(sym.arroba, yycolumn, yyline, yytext());
            }
          // fall through
          case 68: break;
          case 16:
            { Token nuevo = new Token(yytext(), "AbreCorchete", yyline,yycolumn);
              Principal.ListaTokens.add(nuevo);
              System.out.println("Reconocio "+yytext()+" AbreC"); return new Symbol(sym.AbreC, yycolumn, yyline, yytext());
            }
          // fall through
          case 69: break;
          case 17:
            { Token nuevo = new Token(yytext(), "CierrraCorchete", yyline,yycolumn);
              Principal.ListaTokens.add(nuevo);
              System.out.println("Reconocio "+yytext()+" CierraC"); return new Symbol(sym.CierraC, yycolumn, yyline, yytext());
            }
          // fall through
          case 70: break;
          case 18:
            { Token nuevo = new Token(yytext(), "Identificador", yyline,yycolumn);
               Principal.ListaTokens.add(nuevo);
               System.out.println("Reconocio "+yytext()+" id"); return new Symbol(sym.id, yycolumn, yyline, yytext());
            }
          // fall through
          case 71: break;
          case 19:
            { Token nuevo = new Token(yytext(), "Cadena", yyline,yycolumn);
               Principal.ListaTokens.add(nuevo);
               System.out.println("Reconocio "+yytext()+" cadena"); return new Symbol(sym.cadena, yycolumn, yyline, yytext());
            }
          // fall through
          case 72: break;
          case 20:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" arr"); return new Symbol(sym.arr, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 21:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" DIV"); return new Symbol(sym.DIV, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 22:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" end"); return new Symbol(sym.end, yycolumn, yyline, yytext());
            }
          // fall through
          case 75: break;
          case 23:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" MAX"); return new Symbol(sym.max, yycolumn, yyline, yytext());
            }
          // fall through
          case 76: break;
          case 24:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" MIN"); return new Symbol(sym.min, yycolumn, yyline, yytext());
            }
          // fall through
          case 77: break;
          case 25:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" MOD"); return new Symbol(sym.MOD, yycolumn, yyline, yytext());
            }
          // fall through
          case 78: break;
          case 26:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" MUL"); return new Symbol(sym.MUL, yycolumn, yyline, yytext());
            }
          // fall through
          case 79: break;
          case 27:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" RES"); return new Symbol(sym.RES, yycolumn, yyline, yytext());
            }
          // fall through
          case 80: break;
          case 28:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" SUM"); return new Symbol(sym.SUM, yycolumn, yyline, yytext());
            }
          // fall through
          case 81: break;
          case 29:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" var"); return new Symbol(sym.var, yycolumn, yyline, yytext());
            }
          // fall through
          case 82: break;
          case 30:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" charr"); return new Symbol(sym.charr, yycolumn, yyline, yytext());
            }
          // fall through
          case 83: break;
          case 31:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" ejeX"); return new Symbol(sym.ejeX, yycolumn, yyline, yytext());
            }
          // fall through
          case 84: break;
          case 32:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" ejeY"); return new Symbol(sym.ejeY, yycolumn, yyline, yytext());
            }
          // fall through
          case 85: break;
          case 33:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" EXEC"); return new Symbol(sym.exec, yycolumn, yyline, yytext());
            }
          // fall through
          case 86: break;
          case 34:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" Moda"); return new Symbol(sym.Moda, yycolumn, yyline, yytext());
            }
          // fall through
          case 87: break;
          case 35:
            { Token nuevo = new Token(yytext(), "Comentario Multi", yyline,yycolumn);
                        Principal.ListaTokens.add(nuevo);
                        System.out.println("Comentario: "+yytext());
            }
          // fall through
          case 88: break;
          case 36:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" label"); return new Symbol(sym.label, yycolumn, yyline, yytext());
            }
          // fall through
          case 89: break;
          case 37:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" Media"); return new Symbol(sym.Media, yycolumn, yyline, yytext());
            }
          // fall through
          case 90: break;
          case 38:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" print"); return new Symbol(sym.print, yycolumn, yyline, yytext());
            }
          // fall through
          case 91: break;
          case 39:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" column"); return new Symbol(sym.column, yycolumn, yyline, yytext());
            }
          // fall through
          case 92: break;
          case 40:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" doubleee"); return new Symbol(sym.doubleee, yycolumn, yyline, yytext());
            }
          // fall through
          case 93: break;
          case 41:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" Titulo"); return new Symbol(sym.titulo, yycolumn, yyline, yytext());
            }
          // fall through
          case 94: break;
          case 42:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" values"); return new Symbol(sym.values, yycolumn, yyline, yytext());
            }
          // fall through
          case 95: break;
          case 43:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" Console"); return new Symbol(sym.Console, yycolumn, yyline, yytext());
            }
          // fall through
          case 96: break;
          case 44:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" Mediana"); return new Symbol(sym.Mediana, yycolumn, yyline, yytext());
            }
          // fall through
          case 97: break;
          case 45:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" Program"); return new Symbol(sym.Program, yycolumn, yyline, yytext());
            }
          // fall through
          case 98: break;
          case 46:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" tituloX"); return new Symbol(sym.tituloX, yycolumn, yyline, yytext());
            }
          // fall through
          case 99: break;
          case 47:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" tituloY"); return new Symbol(sym.tituloY, yycolumn, yyline, yytext());
            }
          // fall through
          case 100: break;
          case 48:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" graphBar"); return new Symbol(sym.graphBar, yycolumn, yyline, yytext());
            }
          // fall through
          case 101: break;
          case 49:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" graphPie"); return new Symbol(sym.graphPie, yycolumn, yyline, yytext());
            }
          // fall through
          case 102: break;
          case 50:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" Varianza"); return new Symbol(sym.varianza, yycolumn, yyline, yytext());
            }
          // fall through
          case 103: break;
          case 51:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" graphLine"); return new Symbol(sym.graphLine, yycolumn, yyline, yytext());
            }
          // fall through
          case 104: break;
          case 52:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" Histogram"); return new Symbol(sym.Histogram, yycolumn, yyline, yytext());
            }
          // fall through
          case 105: break;
          case 53:
            { Token nuevo = new Token(yytext(), "Palabra Reservada", yyline,yycolumn);
                Principal.ListaTokens.add(nuevo);
                System.out.println("Reconocio "+yytext()+" End Program"); return new Symbol(sym.endProgram, yycolumn, yyline, yytext());
            }
          // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
