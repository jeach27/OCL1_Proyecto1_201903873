/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto1;

import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.PrintWriter;
import java.io.StringReader;

import Errores.ErroresL;
import Objetos.Token;
import Objetos.Simbolo;
import Objetos.graphBar;
import Objetos.graphPie;
import Objetos.Operaciones;
import Analizadores.parser;
import Analizadores.scanner;
import java.awt.BorderLayout;
import java.awt.Dimension;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;


/**
 *
 * @author jeach
 */
public class Principal extends javax.swing.JFrame {
    
    public ArrayList<File> listaA = new ArrayList<>();
    public static ArrayList<ErroresL> ListaErrores = new ArrayList<>();
    public static ArrayList<Token> ListaTokens = new ArrayList<>();
    public static ArrayList<Simbolo> ListaSimbolos = new ArrayList<>();
    
    public static ArrayList<Object> Prints = new ArrayList<>();
    public static graphBar graphsB = new graphBar(null, null, null);
    public static graphPie graphsP = new graphPie(null);
    
    public static ArrayList<String> varia = new ArrayList<>();
    public static ArrayList<Operaciones> opera = new ArrayList<>();
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Pestanias = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        PanelGraficas = new javax.swing.JPanel();
        ButtonAnterior = new javax.swing.JButton();
        ButtonSiguiente = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Consola = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        ButtonNew = new javax.swing.JMenuItem();
        ButtonAbrir = new javax.swing.JMenuItem();
        ButtonPestanias = new javax.swing.JMenu();
        ButtonGuardarP = new javax.swing.JMenuItem();
        ButtonEliminarP = new javax.swing.JMenuItem();
        ButtonEjecutar = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        Reportes = new javax.swing.JMenu();
        ReporteTokens = new javax.swing.JMenuItem();
        ReporteErrores = new javax.swing.JMenuItem();
        ReporteSimbolos = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("COMPI1");

        jLabel2.setText("ENTRADA");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        Pestanias.addTab("tab1", jScrollPane2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Pestanias, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Pestanias))
        );

        jLabel3.setText("GRAFICAS");

        javax.swing.GroupLayout PanelGraficasLayout = new javax.swing.GroupLayout(PanelGraficas);
        PanelGraficas.setLayout(PanelGraficasLayout);
        PanelGraficasLayout.setHorizontalGroup(
            PanelGraficasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PanelGraficasLayout.setVerticalGroup(
            PanelGraficasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );

        ButtonAnterior.setText("Anterior");
        ButtonAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAnteriorActionPerformed(evt);
            }
        });

        ButtonSiguiente.setText("Siguiente");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(ButtonAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                        .addComponent(ButtonSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(PanelGraficas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(PanelGraficas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonAnterior)
                    .addComponent(ButtonSiguiente))
                .addContainerGap())
        );

        jLabel1.setText("CONSOLA");

        Consola.setEditable(false);
        Consola.setColumns(20);
        Consola.setRows(5);
        jScrollPane1.setViewportView(Consola);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("Archivo");

        ButtonNew.setText("Nuevo Archivo");
        ButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonNewActionPerformed(evt);
            }
        });
        jMenu1.add(ButtonNew);

        ButtonAbrir.setText("Abrir Archivo");
        ButtonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(ButtonAbrir);

        jMenuBar1.add(jMenu1);

        ButtonPestanias.setText("Pestañas");
        ButtonPestanias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPestaniasActionPerformed(evt);
            }
        });

        ButtonGuardarP.setText("Guardar Como");
        ButtonGuardarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonGuardarPActionPerformed(evt);
            }
        });
        ButtonPestanias.add(ButtonGuardarP);

        ButtonEliminarP.setText("Eliminar");
        ButtonPestanias.add(ButtonEliminarP);

        jMenuBar1.add(ButtonPestanias);

        ButtonEjecutar.setText("Ejecutar");
        ButtonEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEjecutarActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Ejecutar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        ButtonEjecutar.add(jMenuItem1);

        jMenuBar1.add(ButtonEjecutar);

        Reportes.setText("Reporte");

        ReporteTokens.setText("Tokens");
        ReporteTokens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReporteTokensActionPerformed(evt);
            }
        });
        Reportes.add(ReporteTokens);

        ReporteErrores.setText("Errores");
        ReporteErrores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReporteErroresActionPerformed(evt);
            }
        });
        Reportes.add(ReporteErrores);

        ReporteSimbolos.setText("Tabla de Simbolos");
        ReporteSimbolos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReporteSimbolosActionPerformed(evt);
            }
        });
        Reportes.add(ReporteSimbolos);

        jMenuBar1.add(Reportes);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Boton para regresar en las graficas
    private void ButtonAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAnteriorActionPerformed
    
    }//GEN-LAST:event_ButtonAnteriorActionPerformed
    //Boton para agregar una nueva pestaña en el area de Entrada
    private void ButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonNewActionPerformed
        JTextArea textArea = new JTextArea();
        JScrollPane scrollPane = new JScrollPane(textArea);
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify file name and location");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int userSelection = fileChooser.showSaveDialog(this);
        
        
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToCreate = fileChooser.getSelectedFile();
            String path = fileToCreate.getAbsolutePath();
            if (!path.endsWith(".df")) {
                path += ".df";
            }
            try {
                if (!new File(path).createNewFile()) {
                    JOptionPane.showMessageDialog(this, "File could not be created", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "File created successfully: " + fileToCreate.getAbsolutePath(), "Success", JOptionPane.INFORMATION_MESSAGE);
                    Pestanias.addTab(fileToCreate.getName() , scrollPane);
                    listaA.add(fileToCreate);
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_ButtonNewActionPerformed
    //Boton para abrir un archivo existente .df
    private void ButtonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAbrirActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filtroImagen = new FileNameExtensionFilter("DF(.df)", "df");
        fileChooser.setFileFilter(filtroImagen);
        fileChooser.setDialogTitle("Specify a file");
        fileChooser.showSaveDialog(null);

        try {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            listaA.add(fileChooser.getSelectedFile());
            File f = fileChooser.getSelectedFile();
            BufferedReader bf = new BufferedReader(new FileReader(f));
            String name = f.getName();
            if (name.endsWith(".df")) {
                name = name.substring(0, name.length()-3);
            }
            
            String line;
            StringBuilder text = new StringBuilder();
            while ((line = bf.readLine()) != null) {
                text.append(line).append("\n");
            }
            JTextArea textArea = new JTextArea(text.toString());
            JScrollPane scrollPane = new JScrollPane(textArea);
            Pestanias.addTab(name, scrollPane);
        } catch (IOException e) {
        }
        
    }//GEN-LAST:event_ButtonAbrirActionPerformed

    private void ButtonPestaniasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPestaniasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonPestaniasActionPerformed
    //Boton para guardar como Pestanias 
    private void ButtonGuardarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonGuardarPActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save file");
        fileChooser.setFileFilter(new FileNameExtensionFilter("df", "df"));

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String fileName = fileToSave.getAbsolutePath();

            if (!fileName.endsWith(".df")) {
                fileName += ".df";
            }

            try (FileWriter fileWriter = new FileWriter(fileName)) {
                Component aux = Pestanias.getSelectedComponent();
                if (aux instanceof JScrollPane) {
                    // Get the JTextArea inside the JScrollPane
                    JTextArea selectedTextArea = (JTextArea) ((JScrollPane) aux).getViewport().getView();
                    fileWriter.write(selectedTextArea.getText());
                    Pestanias.remove(aux);
                }
                JOptionPane.showMessageDialog(this, "File saved successfully: " + fileName, "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_ButtonGuardarPActionPerformed

   
    
    private void ButtonEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEjecutarActionPerformed
        
    }//GEN-LAST:event_ButtonEjecutarActionPerformed
    //Boton de Ejecutar en Consola
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        try{
            Component selectedComponent = Pestanias.getSelectedComponent();

            // Check if the selected component is a JPanel
            if (selectedComponent instanceof JScrollPane) {
                JTextArea selectedTextArea = (JTextArea) ((JScrollPane) selectedComponent).getViewport().getView();
                
                scanner sintac = new scanner(new BufferedReader(new StringReader(selectedTextArea.getText())));
                parser par = new parser(sintac);
                par.parse();  
            }
  
        }catch(Exception e){
            System.out.println("Error en parser");
        }
        
        int tam = Prints.size();
        for (int i = 0; i < tam; i++) {
            Consola.append(Prints.get(i).toString() + "\n");
        }
        
        DefaultCategoryDataset datos = new DefaultCategoryDataset();
        
        datos.setValue(1,"mate","juan");
        datos.setValue(3,"mate","pedro");
        datos.setValue(1,"mate","pablo");
        
        JFreeChart grafBar = ChartFactory.createBarChart3D(
                "Calificaciones",   //Nombre de Grafico
                "Estudiantes Mate", //Nombre Barras o Columnas
                "Calificacion",     //Nombre de la numeracion
                datos,              //datos del grafico
                PlotOrientation.VERTICAL,   // orientacion
                true,                       // legenda de barras individuales
                true,                       //Herramientas
                false                       //url grafico
        );
        
        ChartPanel panel = new ChartPanel(grafBar);
        panel.setMouseWheelEnabled(true);
        panel.setPreferredSize(new Dimension(400,200));
        
        PanelGraficas.setLayout(new BorderLayout());
        PanelGraficas.add(panel, BorderLayout.NORTH);
                
        pack();
        repaint();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    //Boton para Reporte de Tokens
    private void ReporteTokensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReporteTokensActionPerformed
        try {
            generarReporteTokens();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_ReporteTokensActionPerformed

    //Boton para Reporte de Errores
    private void ReporteErroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReporteErroresActionPerformed
        try {
            generarReporteErrores();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_ReporteErroresActionPerformed
    
    //Boton para Reporte de Simbolos
    private void ReporteSimbolosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReporteSimbolosActionPerformed
        try {
            generarReporteSimbolos();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_ReporteSimbolosActionPerformed
    
    public static void generarReporteErrores() throws IOException{
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            String path = "ReporteErrores.html";
            fichero = new FileWriter(path);
            pw = new PrintWriter(fichero);
            //comenzamos a escribir el html
            pw.println("<html>");
            pw.println("<head><title>REPORTE DE ERRORES"
                    + "</title></head>");
            pw.println("<body>");
            pw.println("<div align=\"center\">");
            pw.println("<h1>REPORTE DE ERRORES</h1>");
            pw.println("<br></br>");
            pw.println("<table border=1>");
            pw.println("<tr>");
            pw.println("<td>NO.</td>");
            pw.println("<td>TIPO</td>");
            pw.println("<td>DESCRIPCION</td>");
            pw.println("<td>FILA</td>");
            pw.println("<td>COLUMNA</td>");
            pw.println("</tr>");
            for (int i = 0; i < ListaErrores.size(); i++) {
                pw.println("<tr>");
                pw.println("<td>" + i + "</td>");
                pw.println("<td>" + ListaErrores.get(i).getTipo() + "</td>");
                pw.println("<td>" + ListaErrores.get(i).getDescripcion() + "</td>");
                pw.println("<td>" + ListaErrores.get(i).getFila() + "</td>");
                pw.println("<td>" + ListaErrores.get(i).getColumna() + "</td>");
                pw.println("</tr>");
            }
            pw.println("</table>");
            pw.println("</div");
            pw.println("</body>");
            pw.println("</html>");
            //Desktop.getDesktop().open(new File(path));
        } catch (Exception e) {
        } finally {
            if (null != fichero) {
                fichero.close();
            }
        }
        try {

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public static void generarReporteTokens() throws IOException {
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            String path = "ReporteToken.html";
            fichero = new FileWriter(path);
            pw = new PrintWriter(fichero);
            //comenzamos a escribir el html
            pw.println("<html>");
            pw.println("<head><title>REPORTE DE TOKENS"
                    + "</title></head>");
            pw.println("<body>");
            pw.println("<div align=\"center\">");
            pw.println("<h1>REPORTE DE TOKENS</h1>");
            pw.println("<br></br>");
            pw.println("<table border=1>");
            pw.println("<tr>");
            pw.println("<td>NO.</td>");
            pw.println("<td>LEXEMA</td>");
            pw.println("<td>TIPO</td>");
            pw.println("<td>FILA</td>");
            pw.println("<td>COLUMNA</td>");
            pw.println("</tr>");
            for (int i = 0; i < ListaTokens.size(); i++) {
                pw.println("<tr>");
                pw.println("<td>" + i + "</td>");
                pw.println("<td>" + ListaTokens.get(i).getLexema() + "</td>");
                pw.println("<td>" + ListaTokens.get(i).getTipo() + "</td>");
                pw.println("<td>" + ListaTokens.get(i).getFila() + "</td>");
                pw.println("<td>" + ListaTokens.get(i).getColumna() + "</td>");
                pw.println("</tr>");
            }
            pw.println("</table>");
            pw.println("</div");
            pw.println("</body>");
            pw.println("</html>");
            //Desktop.getDesktop().open(new File(path));
        } catch (Exception e) {
        } finally {
            if (null != fichero) {
                fichero.close();
            }
        }
        try {

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public static void generarReporteSimbolos() throws IOException{
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            String path = "TablaSimbolos.html";
            fichero = new FileWriter(path);
            pw = new PrintWriter(fichero);
            //comenzamos a escribir el html
            pw.println("<html>");
            pw.println("<head><title>TABLA DE SIMBOLOS"
                    + "</title></head>");
            pw.println("<body>");
            pw.println("<div align=\"center\">");
            pw.println("<h1>TABLA DE SIMBOLOS</h1>");
            pw.println("<br></br>");
            pw.println("<table border=1>");
            pw.println("<tr>");
            pw.println("<td>NO.</td>");
            pw.println("<td>NOMBRE</td>");
            pw.println("<td>TIPO</td>");
            pw.println("<td>VALOR</td>");
            pw.println("<td>FILA</td>");
            pw.println("<td>COLUMNA</td>");
            pw.println("</tr>");
            for (int i = 0; i < ListaSimbolos.size(); i++) {
                pw.println("<tr>");
                pw.println("<td>" + i + "</td>");
                pw.println("<td>" + ListaSimbolos.get(i).getNombre() + "</td>");
                pw.println("<td>" + ListaSimbolos.get(i).getTipo() + "</td>");
                pw.println("<td>" + ListaSimbolos.get(i).getValor() + "</td>");
                pw.println("<td>" + ListaSimbolos.get(i).getFila() + "</td>");
                pw.println("<td>" + ListaSimbolos.get(i).getColumna() + "</td>");
                pw.println("</tr>");
            }
            pw.println("</table>");
            pw.println("</div");
            pw.println("</body>");
            pw.println("</html>");
            //Desktop.getDesktop().open(new File(path));
        } catch (Exception e) {
        } finally {
            if (null != fichero) {
                fichero.close();
            }
        }
        try {

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Principal().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ButtonAbrir;
    private javax.swing.JButton ButtonAnterior;
    private javax.swing.JMenu ButtonEjecutar;
    private javax.swing.JMenuItem ButtonEliminarP;
    private javax.swing.JMenuItem ButtonGuardarP;
    private javax.swing.JMenuItem ButtonNew;
    private javax.swing.JMenu ButtonPestanias;
    private javax.swing.JButton ButtonSiguiente;
    private javax.swing.JTextArea Consola;
    private javax.swing.JPanel PanelGraficas;
    private javax.swing.JTabbedPane Pestanias;
    private javax.swing.JMenuItem ReporteErrores;
    private javax.swing.JMenuItem ReporteSimbolos;
    private javax.swing.JMenuItem ReporteTokens;
    private javax.swing.JMenu Reportes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
